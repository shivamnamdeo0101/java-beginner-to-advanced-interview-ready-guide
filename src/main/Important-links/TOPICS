1Ô∏è‚É£ JavaScript Core
- Variables & Scope (var, let, const)
- Hoisting & Temporal Dead Zone (TDZ)
- Closures & IIFE
- this in different contexts (global, object, class, arrow)
- Arrow functions & normal functions differences
- Event Loop, Call Stack, Microtasks vs Macrotasks
- Promises, async/await, Promise.all / Promise.race / Promise.allSettled
- Currying & Partial application
- Debounce & Throttle
- Prototype, Prototype Chain, Inheritance
- Classes & ES6 class inheritance
- Module system (ES6 imports/exports, CommonJS)
- Shallow vs Deep Copy
- Object & Array destructuring, Spread & Rest operators
- Optional chaining & Nullish coalescing (?., ??)
- Type coercion (== vs ===)
- Template literals
- Symbols & Generators
- Sets & Maps
- Error handling (try/catch, custom errors)
- JS memory, garbage collection, closures memory leaks
- Event delegation & bubbling
- Local storage / session storage / cookies basics
- ES6+ features: default parameters, rest/spread, for‚Ä¶of, optional chaining

2Ô∏è‚É£ React / Frontend

- React fundamentals: JSX, Components (functional & class)
- Props, State, Controlled & Uncontrolled components
- Lifecycle methods (class) & useEffect (functional)
- Hooks: useState, useEffect, useRef, useMemo, useCallback, useContext, useReducer
- Context API vs Redux / Zustand / Recoil
- Higher-order components (HOC), Render Props, Compound Components
- React Router v6 (routing, nested routes, dynamic routes)
- Forms: controlled, uncontrolled, validation
- Virtual DOM, reconciliation, key importance
- Performance optimization: memoization, lazy loading, code splitting, Suspense
- Error boundaries & handling errors in React
- React Query / SWR for data fetching
- Event handling & synthetic events
- Conditional rendering, list rendering, keys
- Styling: CSS modules, styled-components, Tailwind, Emotion
- Animations: Framer Motion, React Spring basics
- Testing: Jest, React Testing Library basics
- React StrictMode
- State management patterns (lifting state, prop drilling vs context)

3Ô∏è‚É£ Node.js / Backend

- Node.js fundamentals: Event loop, single-threaded, async nature
- Modules: CommonJS vs ES Modules
- File system (fs) async vs sync
- Streams & Buffers
- EventEmitter
- HTTP module, creating servers
- Express.js: routing, middleware, error handling, request/response
- REST API design principles
- JWT & authentication strategies
- Session & cookie management
- CORS, headers, security best practices
- Environment variables & dotenv
- Async patterns: callbacks, promises, async/await, error handling
- MongoDB + Mongoose: schema design, validation, querying, population
- Redis / caching basics
- WebSockets / Socket.IO basics
- Logging & debugging
- Testing: Jest, Supertest basics
- Deployment basics: PM2, Docker, CI/CD pipelines

4Ô∏è‚É£ Full-Stack / Integration

- Connecting React frontend to Node.js backend
- Axios / Fetch API: error handling, interceptors
- State synchronization (frontend-backend)
- Real-time communication (WebSocket, SSE)
- File uploads & download (Multer, S3)
- Handling CORS / Proxy issues
- Authentication & Authorization flows
- Input validation & sanitization (Joi, express-validator)
- Performance tuning: DB queries, indexing, lazy loading frontend data
- Security best practices: XSS, CSRF, SQL/NoSQL injection, helmet.js

5Ô∏è‚É£ Optional / Advanced / Nice-to-Know

- TypeScript basics & typing React/Node
- GraphQL: queries, mutations, Apollo Client / Server
- Microservices & REST vs GraphQL
- CI/CD basics: Github Actions / Jenkins / Docker
- Testing strategies: unit, integration, E2E (Cypress, Playwright)
- Webpack / Vite / Babel basics
- Design patterns: Singleton, Factory, Observer (Node/JS)
- RxJS & reactive programming
- Serverless functions (AWS Lambda / Netlify / Vercel)
- Caching strategies & CDNs



Sure! Here‚Äôs a **curated list of SQL & Database interview questions** suitable for **3 years of experience**, covering **basic, intermediate, and advanced topics** including performance, CTEs, indexing, and practical scenarios:

---

# **1Ô∏è‚É£ SQL Basics**

1. Difference between `INNER JOIN`, `LEFT JOIN`, `RIGHT JOIN`, `FULL OUTER JOIN`.
2. Difference between `WHERE` and `HAVING` clauses.
3. What is the difference between `GROUP BY` and `ORDER BY`?
4. Difference between `DISTINCT` and `GROUP BY`.
5. Difference between `UNION` and `UNION ALL`.
6. What is a primary key vs foreign key vs unique key?

---

# **2Ô∏è‚É£ SQL Intermediate**

7. What is a **CTE (Common Table Expression)** and when would you use it?
8. Recursive CTE example to find **hierarchical data**.
9. Explain **indexes** and how they improve query performance.
10. Difference between **clustered** and **non-clustered indexes**.
11. Explain **views** vs tables. Can views be updated?
12. Difference between `TRUNCATE`, `DELETE`, and `DROP`.
13. How does **auto-increment** work in SQL?
14. Explain transactions and ACID properties.

---

# **3Ô∏è‚É£ SQL Advanced / Optimization**

15. How to optimize **slow queries**?
16. What are **subqueries** and correlated subqueries?
17. Difference between **derived tables** and **CTEs**.
18. What is a **window function**? Example: `ROW_NUMBER()`, `RANK()`.
19. Explain **normalization vs denormalization**.
20. What is a **foreign key constraint with cascade options**?
21. Difference between **temporary tables** and **CTEs**.
22. How does **index seek** differ from **index scan**?
23. Explain **execution plan** in SQL Server/MySQL.

---

# **4Ô∏è‚É£ Practical / Scenario-Based**

24. Find the **second highest salary** in a table.
25. Write a query to find **duplicate records**.
26. Write a query to **get the running total** of sales per day.
27. Query to **pivot/unpivot data** in SQL.
28. Query to get **employees with no manager** using self-join.
29. How to **delete duplicate rows** but keep one record.
30. How to **update multiple rows** based on a join with another table.

---

# **5Ô∏è‚É£ Misc / Fun Questions**

31. Difference between `CHAR` and `VARCHAR`.
32. Explain **foreign key indexing**: is it necessary?
33. Explain **deadlocks** and how to resolve them.
34. Difference between **stored procedure** and **function**.
35. Explain **materialized view** vs **normal view**.

---

üí° **Tips for 3-Year Level:**

* Be ready to **write queries on the spot**, especially with `JOINs`, `CTE`, and `aggregates`.
* Know **indexing, execution plan, and performance optimization**.
* Understand **transactions, ACID, and isolation levels**.
* Practice **recursive queries** and **window functions**.

---

If you want, I can also make a **SQL cheat sheet with example queries** covering all these questions for **quick reference for interviews**.

Do you want me to do that?
